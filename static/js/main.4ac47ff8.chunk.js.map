{"version":3,"sources":["components/UserList.tsx","components/UserFilter.tsx","utils/store.ts","crud/mockData.ts","store/ducks/users.duck.ts","crud/users.crud.ts","store/selectors/users.ts","pages/Main.tsx","App.tsx","store/rootDuck.ts","store/store.ts","index.tsx"],"names":["UserList","users","loading","isReadyUsers","CircularProgress","length","className","map","user","last_name","first_name","dayjs","created_at","format","id","useStyles","makeStyles","theme","createStyles","formControl","margin","spacing","minWidth","selectEmpty","marginTop","UserFilter","changeFilter","filter","classes","onChange","value","filterType","FormGroup","row","FormControl","variant","TextField","disabled","label","search","event","target","InputLabel","Select","labelId","sort","MenuItem","FormControlLabel","control","Checkbox","checked","onlyActive","e","name","color","createAction","type","payload","undefined","data","is_active","fetchData","a","Promise","resolve","setTimeout","result","fetchSaga","saga","FETCH_USERS_REQUEST","FETCH_USERS_SUCCESS","FETCH_USERS_FAIL","CHANGE_FILTER","initialState","list","loaded","actions","fetchRequest","fetchSuccess","fetchFail","call","put","response","message","takeLatest","usersWithFilter","createSelector","state","userList","isAscSort","b","searchText","toLocaleLowerCase","toLowerCase","includes","connector","connect","fetchUsers","usersActions","Button","onClick","App","ReactRouterRoute","Route","Main","rootSaga","rootReducer","combineReducers","action","selectedSort","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ac47ff8.chunk.js","sourcesContent":["import React from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport dayjs from \"dayjs\";\n\nimport { IUser } from \"../interfaces/users\";\n\nconst UserList: React.FC<{\n  users: IUser[];\n  loading: boolean;\n  isReadyUsers?: boolean;\n}> = ({ users, loading, isReadyUsers }) => {\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  if (isReadyUsers && !users.length) {\n    return <div>Ничего не найдено</div>;\n  }\n\n  return (\n    <ul className=\"user-list\">\n      {users.map((user) => (\n        <li key={user.id}>{`${user.last_name} ${user.first_name}, ${dayjs(\n          user.created_at\n        ).format(\"DD.MM.YYYY, HH:mm:ss\")}`}</li>\n      ))}\n    </ul>\n  );\n};\n\nexport default UserList;\n","import React from \"react\";\nimport {\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n  FormGroup,\n} from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nimport { IFilter } from \"../store/ducks/users.duck\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 250,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  })\n);\n\nconst UserFilter: React.FC<{\n  changeFilter: any;\n  filter: IFilter;\n  isReadyUsers?: boolean;\n}> = ({ changeFilter, filter, isReadyUsers = false }) => {\n  const classes = useStyles();\n\n  const onChange = (value: string | boolean, filterType: any) => {\n    return changeFilter({ ...filter, [filterType]: value });\n  };\n\n  return (\n    <FormGroup row>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <TextField\n          disabled={!isReadyUsers}\n          id=\"outlined-basic\"\n          label=\"Введите имя\"\n          variant=\"outlined\"\n          value={filter.search}\n          onChange={(event) => onChange(event.target.value as string, \"search\")}\n        />\n      </FormControl>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"sort-select-label\">\n          Сортировать по дате создания\n        </InputLabel>\n        <Select\n          disabled={!isReadyUsers}\n          labelId=\"sort-select-label\"\n          id=\"sort-select\"\n          value={filter.sort}\n          onChange={(event: React.ChangeEvent<{ value: unknown }>) =>\n            onChange(event.target.value as string, \"sort\")\n          }\n          label=\"Сортировать по дате создания\"\n        >\n          <MenuItem value=\"0\">Без сортировки</MenuItem>\n          <MenuItem value=\"ASC\">По возрастанию</MenuItem>\n          <MenuItem value=\"DESC\">По убыванию</MenuItem>\n        </Select>\n      </FormControl>\n      <FormControlLabel\n        control={\n          <Checkbox\n            disabled={!isReadyUsers}\n            checked={filter.onlyActive}\n            onChange={(e) => onChange(e.target.checked, \"onlyActive\")}\n            name=\"onlyActive\"\n            color=\"primary\"\n          />\n        }\n        label=\"Показать только активных пользователей\"\n      />\n    </FormGroup>\n  );\n};\n\nexport default UserFilter;\n","export interface Action<T extends string> {\n  type: T;\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n  payload: P;\n}\n\nexport function createAction<T extends string>(\n  type: T,\n  payload?: undefined\n): Action<T>;\nexport function createAction<T extends string, P>(\n  type: T,\n  payload: P\n): ActionWithPayload<T, P>;\nexport function createAction<T extends string, P>(type: T, payload: P) {\n  return payload === undefined ? { type } : { type, payload };\n}\n\ntype FunctionType = (...args: any[]) => any;\n\ninterface ActionCreatorsMapObject {\n  [actionCreator: string]: FunctionType;\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<\n  A[keyof A]\n>;\n","const data = [\n  {\n    created_at: 1615370457000,\n    first_name: \"Семен\",\n    id: 1,\n    is_active: true,\n    last_name: \"Иванов\",\n  },\n  {\n    created_at: 1615314992000,\n    first_name: \"Иван\",\n    id: 2,\n    is_active: false,\n    last_name: \"Леонидов\",\n  },\n  {\n    created_at: 1615536000000,\n    first_name: \"Мария\",\n    id: 3,\n    is_active: true,\n    last_name: \"Семенова\",\n  },\n  {\n    created_at: 1615726800000,\n    first_name: \"Илья\",\n    id: 4,\n    is_active: false,\n    last_name: \"Мариинский\",\n  },\n  {\n    created_at: 1615233600000,\n    first_name: \"Сергей\",\n    id: 5,\n    is_active: true,\n    last_name: \"Александровский\",\n  },\n  {\n    created_at: 1615206992000,\n    first_name: \"Полина\",\n    id: 6,\n    is_active: false,\n    last_name: \"Сергеева\",\n  },\n  {\n    created_at: 1616000400000,\n    first_name: \"Александра\",\n    id: 7,\n    is_active: true,\n    last_name: \"Леонова\",\n  },\n  {\n    created_at: 1616227077000,\n    first_name: \"Екатерина\",\n    id: 8,\n    is_active: true,\n    last_name: \"Ивановская\",\n  },\n];\n\nexport const fetchData = async () => {\n  const result = await new Promise((resolve) => {\n    setTimeout(() => resolve({ data }), 1000);\n  });\n  return result;\n};\n","import { put, takeLatest, call } from \"redux-saga/effects\";\nimport { Reducer } from \"redux\";\n\nimport { TAppActions } from \"../rootDuck\";\nimport { createAction, ActionsUnion } from \"../../utils/store\";\n\nimport { getUsers } from \"../../crud/users.crud\";\nimport { IUser } from \"../../interfaces/users\";\n\nconst FETCH_USERS_REQUEST = \"users/FETCH_REQUEST\";\nconst FETCH_USERS_SUCCESS = \"users/FETCH_SUCCESS\";\nconst FETCH_USERS_FAIL = \"users/FETCH_FAIL\";\n\nconst CHANGE_FILTER = \"users/CHANGE_FILTER\";\n\nexport type TSortType = \"0\" | \"ASC\" | \"DESC\";\n\nexport interface IFilter {\n  sort: TSortType;\n  search: string;\n  onlyActive: boolean;\n}\n\nexport interface IUsersInitialState {\n  loading: boolean;\n  list: IUser[];\n  filter: IFilter;\n  loaded: boolean;\n}\n\nexport const initialFilter: IFilter = {\n  sort: \"0\",\n  search: \"\",\n  onlyActive: false,\n};\n\nconst initialState: IUsersInitialState = {\n  loading: false,\n  filter: initialFilter,\n  list: [],\n  loaded: false,\n};\n\nexport const reducer: Reducer<IUsersInitialState, TAppActions> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case FETCH_USERS_REQUEST: {\n      return {\n        ...state,\n        list: [],\n        loading: true,\n      };\n    }\n\n    case FETCH_USERS_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        list: action.payload,\n        loaded: true,\n      };\n    }\n\n    case FETCH_USERS_FAIL: {\n      return { ...state, loading: false };\n    }\n\n    case CHANGE_FILTER: {\n      return { ...state, selectedSort: action.payload, filter: action.payload };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  fetchRequest: () => createAction(FETCH_USERS_REQUEST),\n  fetchSuccess: (payload: IUser[]) =>\n    createAction(FETCH_USERS_SUCCESS, payload),\n  fetchFail: (payload: any) => createAction(FETCH_USERS_FAIL, payload),\n\n  changeFilter: (payload: IFilter) => createAction(CHANGE_FILTER, payload),\n};\n\nfunction* fetchSaga() {\n  try {\n    const { data } = yield call(() => getUsers());\n    yield put(actions.fetchSuccess(data));\n  } catch (e) {\n    yield put(\n      actions.fetchFail(e?.response?.data?.message || \"Ошибка соединения.\")\n    );\n  }\n}\n\nexport type TActions = ActionsUnion<typeof actions>;\n\nexport function* saga() {\n  yield takeLatest(FETCH_USERS_REQUEST, fetchSaga);\n}\n","import { fetchData } from \"./mockData\";\n\nexport const getUsers = () => {\n  return fetchData();\n};\n","import { createSelector } from \"reselect\";\n\nimport { IAppState } from \"../rootDuck\";\n\nexport const usersSelector = (state: IAppState) => state.users.list;\nexport const filterSelector = (state: IAppState) => state.users.filter;\n\nexport const usersWithFilter = createSelector(\n  usersSelector,\n  filterSelector,\n  (users, { onlyActive, sort, search }) => {\n    let userList = users;\n    // sort\n    const isDefaultSort = sort === \"0\";\n    const isAscSort = sort === \"ASC\";\n\n    if (isDefaultSort) {\n      userList = userList.sort((a, b) => (a.id < b.id ? -1 : 1));\n    } else {\n      userList = userList.sort((a, b) =>\n        a.created_at < b.created_at ? (isAscSort ? -1 : 1) : isAscSort ? 1 : -1\n      );\n    }\n\n    // state\n    if (onlyActive) {\n      userList = userList.filter((user) => user.is_active === onlyActive);\n    }\n\n    // search\n    if (search.length) {\n      const searchText = search.toLocaleLowerCase();\n      userList = userList.filter((user) => {\n        if (\n          user.first_name.toLowerCase().includes(searchText) ||\n          user.last_name.toLowerCase().includes(searchText)\n        ) {\n          return user;\n        }\n      });\n    }\n\n    return userList;\n  }\n);\n","import React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Button } from \"@material-ui/core\";\n\nimport UserList from \"../components/UserList\";\nimport UserFilter from \"../components/UserFilter\";\n\nimport { actions as usersActions } from \"../store/ducks/users.duck\";\nimport { IAppState } from \"../store/rootDuck\";\nimport { usersWithFilter } from \"../store/selectors/users\";\n\nconst MainPage: React.FC<TPropsFromRedux> = ({\n  userList,\n  fetchUsers,\n  changeFilter,\n  filter,\n  loading,\n  loaded,\n}) => (\n  <div className=\"app\">\n    <Button onClick={() => fetchUsers()} variant=\"contained\" color=\"primary\">\n      Загрузить список\n    </Button>\n\n    <UserFilter\n      isReadyUsers={loaded && !loading}\n      filter={filter}\n      changeFilter={changeFilter}\n    />\n    <UserList\n      isReadyUsers={loaded && !loading}\n      loading={loading}\n      users={userList}\n    />\n  </div>\n);\n\nconst connector = connect(\n  (state: IAppState) => ({\n    userList: usersWithFilter(state),\n    loaded: state.users.loaded,\n    loading: state.users.loading,\n    filter: state.users.filter,\n  }),\n  {\n    fetchUsers: usersActions.fetchRequest,\n    changeFilter: usersActions.changeFilter,\n  }\n);\n\ntype TPropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(MainPage);\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { QueryParamProvider } from \"use-query-params\";\n\nimport MainPage from \"./pages/Main\";\nfunction App() {\n  return (\n    <Router>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <MainPage />\n      </QueryParamProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import { all, fork } from \"redux-saga/effects\";\nimport { combineReducers, Reducer } from \"redux\";\n\nimport * as users from \"./ducks/users.duck\";\n\nexport type TAppActions = users.TActions;\n\nexport interface IAppState {\n  users: users.IUsersInitialState;\n}\n\nexport const rootReducer: Reducer<IAppState, TAppActions> = combineReducers<\n  IAppState,\n  TAppActions\n>({\n  users: users.reducer,\n});\n\nexport function* rootSaga() {\n  yield all([users.saga].map((saga) => fork(saga)));\n}\n","import { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { rootReducer, rootSaga } from \"./rootDuck\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\n\nimport store from \"./store/store\";\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}